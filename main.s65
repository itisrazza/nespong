;
; Main entry point
;

.include "defines.inc"

; 6502 interrupt vectors
.segment "VECTORS"
	.word	NmiHandler
	.word	ResetHandler
	.word	IrqHandler

;
; Startup
;
.segment "CODE"

ResetHandler:
	sei		; ignore IRQs
	cld		; disable decimal mode
	ldx #$40	
	stx FRAME_COUNTER	; disable frame counter IRQ

	; reset the stack
	ldx #$FF
	txs

	inx	; x = 0
	stx PPU_CONTROL
	stx PPU_MASK
	stx DMC_FREQ

	; reset PPU_STATUS before wait for vblank, it might not be cleared
	bit PPU_STATUS
	ppu_wait_for_vblank

	; while the PPU stabilises, clear WRAM
	txa	; x = 0, still, copy to a
:	sta $0000, x
	sta $0100, x
	sta $0300, x
	sta $0400, x
	sta $0500, x
	sta $0600, x
	sta $0700, x
	inx
	bne :-

	; $0200 is used for OAM, move all sprites off-screen
	lda #$FF
:	sta $0200, x
	inx
	bne :-

	; TODO: init audio as well

	ppu_wait_for_vblank

	; fill the pallete
	lda #$3F
	sta PPUStringDest
	lda #$00
	sta PPUStringDest + 1
	lda #<PaletteData
	sta PPUStringSrc
	lda #>PaletteData
	sta PPUStringSrc + 1
	lda #32
	sta PPUStringBytes
	lda #0
	sta PPUStringPages
	jsr PPUStringCopy
	
;	ppu_addr_set PALETTE_TILES
;	ldx #$00
;:	lda	#$0F
;	sta PPU_DATA
;	lda #$00
;	sta PPU_DATA
;	lda #$10
;	sta PPU_DATA
;	lda #$30
;	sta PPU_DATA
;	inx
;	cpx #$20
;	bne :-

	; fill nametable
	ppu_addr_set (NAMETABLE_0 + 64)
	ldx #$00
	txa
	tay
:	sta PPU_DATA
	inx
	bne :-
	iny
	cpy #$04
	bne :-

	jsr DrawStage

	ppu_wait_for_vblank

	; init game vars
	
	lda #124
	sta BallX
	
	lda #118
	sta BallY
	sta Paddle1Y
	sta Paddle2Y

	lda #1
	sta BallXDelta
	sta BallYDelta

	ppu_wait_for_vblank

	; enable the ppu
	ppu_scroll_set 4, 0
	lda #(PPU_SHOW_BG | PPU_SHOW_SPR | PPU_MASK_BG | PPU_MASK_SPR)
	sta PPU_MASK
	lda #(PPU_ENABLE_NMI | PPU_SPR_HIGH)
	sta PPU_CONTROL

	jmp Main


.define ARENA_OFFSET_X	4
.define ARENA_OFFSET_Y	3
.define ARENA_WIDTH 	27
.define ARENA_HEIGHT	24

DrawStage:

	; Draw vertical lines

	; set PPU_DATA to vertical incrementation
	lda #PPU_DATA_ROW
	sta PPU_CONTROL

	ppu_addr_set	$2042
	lda #1
	ldx #0
:	sta PPU_DATA
	inx
	cpx #ARENA_HEIGHT
	bne :-
	
	ppu_addr_set	$205E
	lda #1
	ldx #0
:	sta PPU_DATA
	inx
	cpx #ARENA_HEIGHT
	bne :-

	ppu_addr_set	$2050
	lda #9
	ldx #0
:	sta PPU_DATA
	inx
	cpx #ARENA_HEIGHT
	bne :-

	; Draw horizontal lines

	lda #0
	sta PPU_CONTROL

	ppu_addr_set	$2023
	lda #2
	ldx #0
:	sta PPU_DATA
	inx
	cpx	#ARENA_WIDTH
	bne :-
	
	ppu_addr_set	$2343
	lda #2
	ldx #0
:	sta PPU_DATA
	inx
	cpx	#ARENA_WIDTH
	bne :-

	; Draw corner tiles
	
	ppu_addr_set	$2022
	lda #3
	sta PPU_DATA
	
	ppu_addr_set	$203E
	lda #4
	sta PPU_DATA
	
	ppu_addr_set	$2342
	lda #5
	sta PPU_DATA
	
	ppu_addr_set	$235E
	lda #6
	sta PPU_DATA

	ppu_addr_set	$2030
	lda #7
	sta PPU_DATA

	ppu_addr_set	$2350
	lda #8
	sta PPU_DATA

	rts


.segment "DATA"

PaletteData:
	.byte $0F, $00, $10, $30
	.byte $0F, $00, $10, $30
	.byte $0F, $00, $10, $30
	.byte $0F, $00, $10, $30
	.byte $0F, $00, $10, $30
	.byte $0F, $00, $10, $30
	.byte $0F, $00, $10, $30
	.byte $0F, $00, $10, $30

SomeData:
	.byte $21, $1E, $25, $25, $28, $00, $30, $28, $2B, $25, $1D, $FF


;
; Global Variable Data
;
.segment "BSS"

Controller1:
.res 1

Controller2:
.res 1

BallX:		.res 1
BallY:		.res 1
BallXDelta:	.res 1
BallYDelta: .res 1
Paddle1Y:	.res 1
Paddle2Y:	.res 1
BallDirection:	.res 1

;
; Main Loop
;
.segment "CODE"

Main:
@MainLoop:
	; get the player controls
	jsr PrepareSprites

	; do game loop here
	jmp @MainLoop


ReadJoysticks:
	; set the latch to 1, then 0, to capture the controller inputs
	; this also has the nice side effect of storing the carry bit
	lda #$01
	sta JOYSTICK_LATCH
	sta Controller1
	sta Controller2
	lsr a
	sta JOYSTICK_LATCH

	; loop over the first controller
:	lda JOYSTICK1
	lsr a
	rol Controller1
	bcc :-

	; loop over the second controller
:	lda JOYSTICK2
	lsr a
	rol Controller2
	bcc :-

	; move the first paddle
	lda Controller1
	and #BUTTON_UP
	beq :+
	lda Paddle1Y
	sec
	sbc #8
	sta Paddle1Y
:	lda Controller1
	and #BUTTON_DOWN
	beq :+
	lda Paddle1Y
	clc
	adc #8
	sta Paddle1Y
:

	; move the second paddle
	lda Controller2
	and #BUTTON_UP
	beq :+
	lda Paddle2Y
	sec
	sbc #8
	sta Paddle2Y
:	lda Controller2
	and #BUTTON_DOWN
	beq :+
	lda Paddle2Y
	clc
	adc #8
	sta Paddle2Y
:

	rts


PrepareSprites:
	; set ball sprite
	oam_sprite 0, #0, BallX, BallY, #0

	; set paddle 1 sprite
	; using A to store Y position, Y to store temps
	ldx #0
	lda Paddle1Y

	sec
	sbc #12
	sta $0204
	ldy #1
	sty $0205
	ldy #SPR_FLIP_H
	sty $0206
	ldy #24
	sty $0207
	clc

	adc #8
	sta $0208
	ldy #2
	sty $0209
	ldy #SPR_FLIP_H
	sty $020A
	ldy #24
	sty $020B
	
	adc #8
	sta $020C
	ldy #3
	sty $020D
	ldy #SPR_FLIP_H
	sty $020E
	ldy #24
	sty $020F

	; set paddle 2 sprite
	; using A to store Y position, Y to store temps
	ldx #0
	lda Paddle2Y

	sec
	sbc #12
	sta $0210
	ldy #1
	sty $0211
	ldy #0
	sty $0212
	ldy #256-32
	sty $0213
	clc
	
	adc #8
	sta $0214
	ldy #2
	sty $0215
	ldy #0
	sty $0216
	ldy #256-32
	sty $0217
	
	adc #8
	sta $0218
	ldy #3
	sty $0219
	ldy #0
	sty $021A
	ldy #256-32
	sty $021B

	rts


MoveBall:
	; Horizontal move and bounds check

	lda BallX
	clc
	adc BallXDelta
	sta BallX

@LeftPaddleCheck:  ; if (x > 32)
	lda BallX
	cmp #32
	bne @LeftPaddleCheckEnd
	bpl @LeftPaddleCheckEnd

	lda Paddle1Y
	sec
	sbc #16
	cmp BallY
	bpl @LeftPaddleCheckEnd
	clc
	adc #24
	cmp BallY
	bmi @LeftPaddleCheckEnd

	lda #01
	sta BallXDelta
@LeftPaddleCheckEnd:

@RightPaddleCheck: ; if (x >= 216)
	lda BallX
	cmp #216
	bne @RightPaddleCheckEnd
	bmi @RightPaddleCheckEnd
	lda Paddle2Y
	sec
	sbc #16
	cmp BallY
	bpl @RightPaddleCheckEnd
	clc
	adc #24
	cmp BallY
	bmi @RightPaddleCheckEnd
	lda #$FF
	sta BallXDelta
@RightPaddleCheckEnd:

	; check right wall (x >= 231)
@RightWallCheck:
	lda BallX
	cmp #231
@RightWallCheckEnd:

	; Vertical move and bounds check

	lda BallY
	clc
	adc BallYDelta
	sta BallY
	
@TopWallCheck:	; if (y <= 13)
	lda BallY
	cmp #12
	bcs @TopWallCheckEnd
	
	lda #12
	sta BallY

	lda #$01
	sta BallYDelta
@TopWallCheckEnd:

	; check bottom (y >= 203)
@BottomWallCheck:	
	lda BallY
	cmp #203
	beq @BottomWallCheckEnd
	bcc @BottomWallCheckEnd

	lda #203
	sta BallY

	lda #$FF
	sta BallYDelta
@BottomWallCheckEnd:

	rts



;
; NMI Handler
;
.segment "CODE"

NmiHandler:
	; DMA the sprites to the PPU
	lda #2
	sta OAM_TRANSFER

	; update joysticks
	jsr ReadJoysticks
	jsr MoveBall

	rti


; PPU string data copy
.segment "ZEROPAGE" : zeropage
.org $0020

PPUStringDest: .res 2	; the PPU destination address (big endian)
PPUStringSrc: .res 2	; the CPU source address (little endian)
PPUStringBytes: .res 1	; number of bytes
PPUStringPages: .res 1	; number of pages

.segment "CODE" : absolute
.reloc

PPUStringCopy:
	lda PPUStringBytes
	ora PPUStringPages
	beq @Return			; return if there is nothing to copy

	; set the PPU address to destination
	lda PPUStringDest
	sta PPU_ADDR
	lda PPUStringDest + 1
	sta PPU_ADDR

	; start block copying
	ldx #0
	ldy #0
:	lda (PPUStringSrc), y
	sta PPU_DATA
	iny
	cpy PPUStringBytes
	bne :-

	; finished copying page, check if we need to change
	cpx PPUStringPages
	beq @Finished
	inc PPUStringSrc + 1	; increment the address by $0100
	inx
	bne :-

@Finished:
	; clear length
	lda #0
	sta PPUStringBytes
	sta PPUStringPages

@Return:
	rts


;
; IRQ Handler
;
IrqHandler:
	; I assume this is for music?
	rti
